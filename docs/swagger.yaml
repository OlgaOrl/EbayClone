openapi: 3.0.0
info:
  title: eBayClone API (EN / ET)
  version: "1.0.0"
  description: |
    **In English:**
    This API allows managing an eBay-like marketplace. All endpoints are documented.
    
    **Eesti keeles:**
    See API võimaldab hallata eBay sarnast turuplatvormi. Kõik lõpp-punktid on dokumenteeritud.
servers:
  - url: http://localhost:3000

tags:
  - name: "Users"
    description: "User management (Kasutajate haldus)"
  - name: "Listings"
    description: "Listings management (Kuulutuste haldus)"
  - name: "Orders"
    description: "Orders management (Tellimuste haldus)"

paths:
  #####################################
  # USERS
  #####################################
  /users:
    post:
      tags:
        - "Users"
      summary: "Create User (Loo kasutaja)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        '201':
          description: "User created (Kasutaja loodud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad Request (Vigane taotlus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      tags:
        - "Users"
      summary: "Login (Logi sisse)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        '200':
          description: "Login successful (Sisselogimine õnnestus)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt-token-here"
        '401':
          description: "Unauthorized (Vale volitused)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: "Bad Request (Vigane taotlus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User (Hangi kasutaja)"
      parameters:
        - in: path
          name: id
          description: "User ID (Kasutaja ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "User data (Kasutaja andmed)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found (Kasutajat ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - "Users"
      summary: "Update User (Muuda kasutaja)"
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        '200':
          description: "User updated (Kasutaja uuendatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad Request (Vigane taotlus)"
        '404':
          description: "User not found (Kasutajat ei leitud)"
    delete:
      tags:
        - "Users"
      summary: "Delete User (Kustuta kasutaja)"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "User ID (Kasutaja ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "User deleted (Kasutaja kustutatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '404':
          description: "User not found (Kasutajat ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/logout:
    post:
      tags:
        - "Users"
      summary: "Logout (Logi välja)"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Logout successful (Väljalogimine õnnestus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '400':
          description: "Bad Request (Vigane taotlus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  #####################################
  # LISTINGS
  #####################################
  /listings:
    get:
      tags:
        - "Listings"
      summary: "Get all Listings (Hangi kõik kuulutused)"
      parameters:
        - in: query
          name: search
          description: "Search keyword (Otsingusõna)"
          required: false
          schema:
            type: string
          example: "phone"
        - in: query
          name: priceMin
          description: "Minimum price (Minimaalne hind)"
          required: false
          schema:
            type: number
          example: 50
        - in: query
          name: priceMax
          description: "Maximum price (Maksimaalne hind)"
          required: false
          schema:
            type: number
          example: 500
      responses:
        '200':
          description: "List of listings (Kuulutuste loetelu)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
    post:
      tags:
        - "Listings"
      summary: "Create Listing (Loo kuulutus)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingCreate"
      responses:
        '201':
          description: "Listing created (Kuulutus loodud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        '400':
          description: "Bad Request (Vigane taotlus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /listings/{id}:
    get:
      tags:
        - "Listings"
      summary: "Get Listing (Hangi kuulutus)"
      parameters:
        - in: path
          name: id
          description: "Listing ID (Kuulutuse ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Listing data (Kuulutuse andmed)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        '404':
          description: "Listing not found (Kuulutust ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - "Listings"
      summary: "Update Listing (Muuda kuulutus)"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingUpdate"
      responses:
        '200':
          description: "Listing updated (Kuulutus uuendatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        '400':
          description: "Bad Request (Vigane taotlus)"
        '404':
          description: "Listing not found (Kuulutust ei leitud)"
    delete:
      tags:
        - "Listings"
      summary: "Delete Listing (Kustuta kuulutus)"
      parameters:
        - in: path
          name: id
          description: "Listing ID (Kuulutuse ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Listing deleted (Kuulutus kustutatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '404':
          description: "Listing not found (Kuulutust ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  #####################################
  # ORDERS
  #####################################
  /orders:
    get:
      tags:
        - "Orders"
      summary: "Get all Orders (Hangi kõik tellimused)"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          description: "Filter by User ID (Filtreeri kasutaja ID järgi)"
          required: false
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "List of orders (Tellimuste loetelu)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - "Orders"
      summary: "Create Order (Loo tellimus)"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        '201':
          description: "Order created (Tellimus loodud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '400':
          description: "Bad Request (Vigane taotlus)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{id}:
    get:
      tags:
        - "Orders"
      summary: "Get Order (Hangi tellimus)"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Order ID (Tellimuse ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Order data (Tellimuse andmed)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          description: "Order not found (Tellimust ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - "Orders"
      summary: "Update Order (Muuda tellimus)"
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderUpdate"
      responses:
        '200':
          description: "Order updated (Tellimus uuendatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '400':
          description: "Bad Request (Vigane taotlus)"
        '404':
          description: "Order not found (Tellimust ei leitud)"
    delete:
      tags:
        - "Orders"
      summary: "Delete Order (Kustuta tellimus)"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Order ID (Tellimuse ID)"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Order deleted (Tellimus kustutatud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '404':
          description: "Order not found (Tellimust ei leitud)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#####################################
# Components
#####################################
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "user1"
        email:
          type: string
          example: "user1@mail.com"
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "user1"
        email:
          type: string
          example: "user1@mail.com"
        password:
          type: string
          example: "secret"
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "user1@mail.com"
        password:
          type: string
          example: "secret"
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "updatedUser"
        email:
          type: string
          example: "updated@mail.com"
        password:
          type: string
          example: "newSecret"
    Listing:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "New item"
        description:
          type: string
          example: "Item description"
        price:
          type: number
          example: 100.0
    ListingCreate:
      type: object
      required:
        - title
        - description
        - price
      properties:
        title:
          type: string
          example: "New item"
        description:
          type: string
          example: "Item description"
        price:
          type: number
          example: 100.0
    ListingUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Updated item"
        description:
          type: string
          example: "Updated description"
        price:
          type: number
          example: 150.0
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        listingId:
          type: integer
          example: 10
        quantity:
          type: integer
          example: 2
        totalPrice:
          type: number
          example: 200.0
    OrderCreate:
      type: object
      required:
        - userId
        - listingId
        - quantity
        - totalPrice
      properties:
        userId:
          type: integer
          example: 1
        listingId:
          type: integer
          example: 10
        quantity:
          type: integer
          example: 2
        totalPrice:
          type: number
          example: 200.0
    OrderUpdate:
      type: object
      properties:
        userId:
          type: integer
          example: 2
        listingId:
          type: integer
          example: 20
        quantity:
          type: integer
          example: 5
        totalPrice:
          type: number
          example: 500.0
    Success:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"
    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"
