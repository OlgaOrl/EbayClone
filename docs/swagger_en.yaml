openapi: 3.0.0
info:
  title: EbayClone API (EN/ ET)
  version: "1.0.0"
  description: |
    This API allows managing an eBay-like marketplace. All endpoints are documented.
servers:
  - url: http://localhost:3000

tags:
  - name: "Users"
    description: "User management"
  - name: "Listings"
    description: "Listings management"
  - name: "Orders"
    description: "Orders management"

paths:
  #####################################
  # USERS
  #####################################
  /users:
    post:
      tags:
        - "Users"
      summary: "Create User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user1"
                email:
                  type: string
                  example: "user1@mail.com"
                password:
                  type: string
                  example: "secret"
      responses:
        '201':
          description: "User created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user1"
                  email:
                    type: string
                    example: "user1@mail.com"
        '400':
          description: "Bad Request"

  /users/login:
    post:
      tags:
        - "Users"
      summary: "Login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user1@mail.com"
                password:
                  type: string
                  example: "secret"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt-token-here"
        '401':
          description: "Unauthorized"
        '400':
          description: "Bad Request"

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User"
      parameters:
        - in: path
          name: id
          description: "User ID"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "User data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user1"
                  email:
                    type: string
                    example: "user1@mail.com"
        '404':
          description: "User not found"

  #####################################
  # LISTINGS
  #####################################
  /listings:
    get:
      tags:
        - "Listings"
      summary: "Get all Listings"
      responses:
        '200':
          description: "List of listings"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
    post:
      tags:
        - "Listings"
      summary: "Create Listing"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New item"
                description:
                  type: string
                  example: "Item description"
                price:
                  type: number
                  example: 100.0
      responses:
        '201':
          description: "Listing created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "New item"
                  description:
                    type: string
                    example: "Item description"
                  price:
                    type: number
                    example: 100.0
        '400':
          description: "Bad Request"

  /listings/{id}:
    get:
      tags:
        - "Listings"
      summary: "Get Listing"
      parameters:
        - in: path
          name: id
          description: "Listing ID"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Listing data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "Item"
                  description:
                    type: string
                    example: "Description"
                  price:
                    type: number
                    example: 50
        '404':
          description: "Listing not found"

  #####################################
  # ORDERS
  #####################################
  /orders:
    get:
      tags:
        - "Orders"
      summary: "Get all Orders"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "List of orders"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    userId:
                      type: integer
                    listingId:
                      type: integer
                    quantity:
                      type: integer
                    totalPrice:
                      type: number
    post:
      tags:
        - "Orders"
      summary: "Create Order"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                listingId:
                  type: integer
                  example: 10
                quantity:
                  type: integer
                  example: 2
                totalPrice:
                  type: number
                  example: 200.0
      responses:
        '201':
          description: "Order created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: integer
                  listingId:
                    type: integer
                  quantity:
                    type: integer
                  totalPrice:
                    type: number
        '400':
          description: "Bad Request"

  /orders/{id}:
    get:
      tags:
        - "Orders"
      summary: "Get Order"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Order ID"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Order data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: integer
                    example: 1
                  listingId:
                    type: integer
                    example: 10
                  quantity:
                    type: integer
                    example: 2
                  totalPrice:
                    type: number
                    example: 200.0
        '404':
          description: "Order not found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
